package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"strconv"

	"github.com/cesaraugstz/comrade-notes/api/internal/auth"
	"github.com/cesaraugstz/comrade-notes/api/internal/database"
)

// CreateWishlist is the resolver for the createWishlist field.
func (r *mutationResolver) CreateWishlist(ctx context.Context, input CreateWishlistInput) (*MutationResponse, error) {
	userID := getUserIDFromContext(ctx)
	if userID == 0 {
		return &MutationResponse{Success: false, Message: stringPtr("unauthorized")}, nil
	}

	var categoryID *uint
	if input.CategoryID != nil {
		id, err := strconv.ParseUint(*input.CategoryID, 10, 32)
		if err != nil {
			return &MutationResponse{Success: false, Message: stringPtr("invalid category ID")}, nil
		}
		categoryID = uintPtr(uint(id))
	}

	wishlist := &database.Wishlist{
		Name:        input.Name,
		Description: stringValue(input.Description),
		CategoryID:  categoryID,
		OwnerID:     userID,
	}

	if err := r.DB.WithContext(ctx).Create(wishlist).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to create wishlist")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// CreateWishlistItem is the resolver for the createWishlistItem field.
func (r *mutationResolver) CreateWishlistItem(ctx context.Context, input CreateWishlistItemInput) (*MutationResponse, error) {
	wishlistID, err := strconv.ParseUint(input.WishlistID, 10, 32)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("invalid wishlist ID")}, nil
	}

	var categoryID *uint
	if input.CategoryID != nil {
		id, err := strconv.ParseUint(*input.CategoryID, 10, 32)
		if err != nil {
			return &MutationResponse{Success: false, Message: stringPtr("invalid category ID")}, nil
		}
		categoryID = uintPtr(uint(id))
	}

	item := &database.WishlistItem{
		Name:        input.Name,
		Description: stringValue(input.Description),
		CategoryID:  categoryID,
		Rating:      input.Rating,
		WishlistID:  uint(wishlistID),
	}

	if err := r.DB.WithContext(ctx).Create(item).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to create item")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// UpdateWishlistItem is the resolver for the updateWishlistItem field.
func (r *mutationResolver) UpdateWishlistItem(ctx context.Context, id string, input UpdateWishlistItemInput) (*MutationResponse, error) {
	itemID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("invalid item ID")}, nil
	}

	var categoryID *uint
	if input.CategoryID != nil {
		cID, err := strconv.ParseUint(*input.CategoryID, 10, 32)
		if err != nil {
			return &MutationResponse{Success: false, Message: stringPtr("invalid category ID")}, nil
		}
		categoryID = uintPtr(uint(cID))
	}

	updates := map[string]interface{}{
		"name":        input.Name,
		"description": stringValue(input.Description),
		"category_id": categoryID,
		"rating":      input.Rating,
	}

	if err := r.DB.WithContext(ctx).Model(&database.WishlistItem{}).Where("id = ?", itemID).Updates(updates).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to update item")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// DeleteWishlistItem is the resolver for the deleteWishlistItem field.
func (r *mutationResolver) DeleteWishlistItem(ctx context.Context, id string) (*MutationResponse, error) {
	itemID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("invalid item ID")}, nil
	}

	if err := r.DB.WithContext(ctx).Delete(&database.WishlistItem{}, itemID).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to delete item")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input CreateLinkInput) (*MutationResponse, error) {
	itemID, err := strconv.ParseUint(input.WishlistItemID, 10, 32)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("invalid item ID")}, nil
	}

	link := &database.Link{
		URL:            input.URL,
		Title:          stringValue(input.Title),
		Price:          input.Price,
		WishlistItemID: uint(itemID),
	}

	if err := r.DB.WithContext(ctx).Create(link).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to create link")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// UpdateLink is the resolver for the updateLink field.
func (r *mutationResolver) UpdateLink(ctx context.Context, id string, input UpdateLinkInput) (*MutationResponse, error) {
	linkID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("invalid link ID")}, nil
	}

	updates := map[string]interface{}{
		"url":   input.URL,
		"title": stringValue(input.Title),
		"price": input.Price,
	}

	if err := r.DB.WithContext(ctx).Model(&database.Link{}).Where("id = ?", linkID).Updates(updates).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to update link")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// DeleteLink is the resolver for the deleteLink field.
func (r *mutationResolver) DeleteLink(ctx context.Context, id string) (*MutationResponse, error) {
	linkID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("invalid link ID")}, nil
	}

	if err := r.DB.WithContext(ctx).Delete(&database.Link{}, linkID).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to delete link")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input CreateCategoryInput) (*MutationResponse, error) {
	category := &database.Category{Name: input.Name}

	if err := r.DB.WithContext(ctx).Create(category).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to create category")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input CreateUserInput) (*MutationResponse, error) {
	var exists bool
	err := r.DB.WithContext(ctx).
		Model(&database.User{}).
		Select("1").
		Where("email = ?", input.Email).
		First(&exists).Error

	if err == nil {
		return &MutationResponse{Success: false, Message: stringPtr("user already exists")}, nil
	}

	hashedPassword, err := auth.HashPassword(input.Password)
	if err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("error while hashing the password")}, nil
	}

	user := &database.User{
		Email:    input.Email,
		Name:     input.Name,
		Password: hashedPassword,
	}

	if err := r.DB.WithContext(ctx).Create(user).Error; err != nil {
		return &MutationResponse{Success: false, Message: stringPtr("failed to create user")}, nil
	}

	return &MutationResponse{Success: true}, nil
}

// Wishlists is the resolver for the wishlists field.
func (r *queryResolver) Wishlists(ctx context.Context) ([]*Wishlist, error) {
	userID := getUserIDFromContext(ctx)
	if userID == 0 {
		return nil, nil
	}

  // TODO: filter by user or shared with
	var dbWishlists []database.Wishlist
	err := r.DB.WithContext(ctx).
		Preload("Category").
		Preload("Owner").
		Preload("Items.Category").
		Preload("Items.Links").
		Find(&dbWishlists).Error

	if err != nil {
		return nil, err
	}

	return convertWishlists(dbWishlists), nil
}

// Wishlist is the resolver for the wishlist field.
func (r *queryResolver) Wishlist(ctx context.Context, id string) (*Wishlist, error) {
	wishlistID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	var dbWishlist database.Wishlist
	err = r.DB.WithContext(ctx).
		Preload("Category").
		Preload("Owner").
		Preload("Items.Category").
		Preload("Items.Links").
		First(&dbWishlist, wishlistID).Error

	if err != nil {
		return nil, err
	}

	return convertWishlist(&dbWishlist), nil
}

// WishlistItem is the resolver for the wishlistItem field.
func (r *queryResolver) WishlistItem(ctx context.Context, id string) (*WishlistItem, error) {
	itemID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	var dbItem database.WishlistItem
	err = r.DB.WithContext(ctx).
		Preload("Category").
		Preload("Links").
		First(&dbItem, itemID).Error

	if err != nil {
		return nil, err
	}

	return convertWishlistItem(&dbItem), nil
}

// Link is the resolver for the link field.
func (r *queryResolver) Link(ctx context.Context, id string) (*Link, error) {
	linkID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	var dbLink database.Link
	err = r.DB.WithContext(ctx).First(&dbLink, linkID).Error
	if err != nil {
		return nil, err
	}

	return convertLink(&dbLink), nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*Category, error) {
	var dbCategories []database.Category
	err := r.DB.WithContext(ctx).Find(&dbCategories).Error
	if err != nil {
		return nil, err
	}

	return convertCategories(dbCategories), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
